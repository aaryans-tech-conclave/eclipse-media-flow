# -*- coding: utf-8 -*-
"""Final_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l5WV7UccQkkjOLvK6jKTb7UsHlaj8kX4
"""

import pandas as pd
import numpy as np
from datetime import datetime
import random

# Configuration Lists
COUNTRIES = ['USA', 'UK', 'Canada', 'Australia', 'Germany', 'Japan', 'Brazil', 'India']
LANGUAGES = ['English', 'Spanish', 'Hindi', 'French', 'Japanese', 'German', 'Multilingual']
RATINGS = ['G', 'PG', 'PG-13', 'R', 'NC-17']
GENRES = ['Action', 'Comedy', 'Drama', 'Horror', 'SciFi', 'Romance', 'Documentary', 'Animation', 'Thriller', 'Fantasy']
THEMES = ['Love', 'Revenge', 'Heroism', 'Betrayal', 'Survival', 'Coming of Age', 'Redemption', 'Justice']
TAG_WEIGHTS = {
    'Christmas': 0.3, 'Halloween': 0.25, 'Diwali': 0.15, 'Holi': 0.12,
    'Easter': 0.1, 'Thanksgiving': 0.2, 'Valentine': 0.18,
    'Cult Classic': 0.4, 'Oscar Winner': 0.25, 'Based on Book': 0.35,
    'Sequel': 0.2, 'Remake': 0.15, 'Family Friendly': 0.3,
    'Graphic Violence': 0.1, 'Strong Romance': 0.25, 'Festival Favorite': 0.2,
    'Independent Film': 0.15, 'Biographical': 0.1, 'Historical': 0.15,
    'Bollywood': 0.16, 'Tollywood': 0.26, 'Regional Cinema': 0.08,
    'Anime': 0.4, 'J-Drama': 0.2, 'Samurai': 0.1
}
STREAMING_PLATFORMS = ['Netflix', 'Amazon Prime', 'Hulu', 'Disney+', 'HBO Max', 'Apple TV+', 'Peacock']

# Complete movie data with all required fields properly filled
movies_data = [
    # 1. The Dark Knight
    {
        "title": "The Dark Knight",
        "release_year": 2008,
        "release_month": 7,
        "runtime": 152,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "Drama",
        "theme": "Justice",
        "tags": []
    },

    # 2. Mad Max: Fury Road
    {
        "title": "Mad Max: Fury Road",
        "release_year": 2015,
        "release_month": 5,
        "runtime": 120,
        "country": "Australia",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Action",
        "secondary_genre": "SciFi",
        "theme": "Survival",
        "tags": []
    },

    # 3. John Wick
    {
        "title": "John Wick",
        "release_year": 2014,
        "release_month": 10,
        "runtime": 101,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Action",
        "secondary_genre": "Thriller",
        "theme": "Revenge",
        "tags": []
    },

    # 4. The Grand Budapest Hotel
    {
        "title": "The Grand Budapest Hotel",
        "release_year": 2014,
        "release_month": 3,
        "runtime": 99,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Comedy",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 5. Superbad
    {
        "title": "Superbad",
        "release_year": 2007,
        "release_month": 8,
        "runtime": 113,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Comedy",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 6. The Shawshank Redemption
    {
        "title": "The Shawshank Redemption",
        "release_year": 1994,
        "release_month": 9,
        "runtime": 142,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Redemption",
        "tags": []
    },

    # 7. Parasite
    {
        "title": "Parasite",
        "release_year": 2019,
        "release_month": 10,
        "runtime": 132,
        "country": "USA",  # Distributed in USA, though Korean film
        "language": "Multilingual",  # Korean with English subtitles
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Betrayal",
        "tags": []
    },

    # 8. 12 Years a Slave
    {
        "title": "12 Years a Slave",
        "release_year": 2013,
        "release_month": 10,
        "runtime": 134,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Survival",
        "tags": []
    },

    # 9. Get Out
    {
        "title": "Get Out",
        "release_year": 2017,
        "release_month": 2,
        "runtime": 104,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Thriller",
        "theme": "Survival",
        "tags": []
    },

    # 10. The Conjuring
    {
        "title": "The Conjuring",
        "release_year": 2013,
        "release_month": 7,
        "runtime": 112,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Thriller",
        "theme": "Survival",
        "tags": []
    },

    # 11. Halloween
    {
        "title": "Halloween",
        "release_year": 1978,
        "release_month": 10,
        "runtime": 91,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Thriller",
        "theme": "Survival",
        "tags": []
    },

    # 12. Inception
    {
        "title": "Inception",
        "release_year": 2010,
        "release_month": 7,
        "runtime": 148,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "SciFi",
        "secondary_genre": "Action",
        "theme": "Redemption",
        "tags": []
    },

    # 13. Blade Runner 2049
    {
        "title": "Blade Runner 2049",
        "release_year": 2017,
        "release_month": 10,
        "runtime": 164,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "SciFi",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 14. The Matrix
    {
        "title": "The Matrix",
        "release_year": 1999,
        "release_month": 3,
        "runtime": 136,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "SciFi",
        "secondary_genre": "Action",
        "theme": "Heroism",
        "tags": []
    },

    # 15. La La Land
    {
        "title": "La La Land",
        "release_year": 2016,
        "release_month": 12,
        "runtime": 128,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Romance",
        "secondary_genre": "Drama",
        "theme": "Love",
        "tags": []
    },

    # 16. The Notebook
    {
        "title": "The Notebook",
        "release_year": 2004,
        "release_month": 6,
        "runtime": 123,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Romance",
        "secondary_genre": "Drama",
        "theme": "Love",
        "tags": []
    },

    # 17. Eternal Sunshine of the Spotless Mind
    {
        "title": "Eternal Sunshine of the Spotless Mind",
        "release_year": 2004,
        "release_month": 3,
        "runtime": 108,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Romance",
        "secondary_genre": "SciFi",
        "theme": "Love",
        "tags": []
    },

    # 18. Free Solo
    {
        "title": "Free Solo",
        "release_year": 2018,
        "release_month": 9,
        "runtime": 100,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Documentary",
        "secondary_genre": "Drama",
        "theme": "Heroism",
        "tags": []
    },

    # 19. March of the Penguins
    {
        "title": "March of the Penguins",
        "release_year": 2005,
        "release_month": 6,
        "runtime": 80,
        "country": "USA",  # US distribution
        "language": "English",  # English narration version
        "mpaa_rating": "G",
        "primary_genre": "Documentary",
        "secondary_genre": "Drama",
        "theme": "Survival",
        "tags": []
    },

    # 20. Spider-Man: Into the Spider-Verse
    {
        "title": "Spider-Man: Into the Spider-Verse",
        "release_year": 2018,
        "release_month": 12,
        "runtime": 117,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Animation",
        "secondary_genre": "Action",
        "theme": "Heroism",
        "tags": []
    },

    # 21. Coco
    {
        "title": "Coco",
        "release_year": 2017,
        "release_month": 11,
        "runtime": 105,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Animation",
        "secondary_genre": "Fantasy",
        "theme": "Coming of Age",
        "tags": []
    },

    # 22. Toy Story 4
    {
        "title": "Toy Story 4",
        "release_year": 2019,
        "release_month": 6,
        "runtime": 100,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "G",
        "primary_genre": "Animation",
        "secondary_genre": "Comedy",
        "theme": "Coming of Age",
        "tags": []
    },

    # 23. Gone Girl
    {
        "title": "Gone Girl",
        "release_year": 2014,
        "release_month": 10,
        "runtime": 149,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Thriller",
        "secondary_genre": "Drama",
        "theme": "Betrayal",
        "tags": []
    },

    # 24. Zodiac
    {
        "title": "Zodiac",
        "release_year": 2007,
        "release_month": 3,
        "runtime": 157,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Thriller",
        "secondary_genre": "Drama",
        "theme": "Justice",
        "tags": []
    },

    # 25. Pan's Labyrinth
    {
        "title": "Pan's Labyrinth",
        "release_year": 2006,
        "release_month": 12,
        "runtime": 118,
        "country": "USA",  # US distribution
        "language": "Spanish",
        "mpaa_rating": "R",
        "primary_genre": "Fantasy",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 26. The Shape of Water
    {
        "title": "The Shape of Water",
        "release_year": 2017,
        "release_month": 12,
        "runtime": 123,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Fantasy",
        "secondary_genre": "Romance",
        "theme": "Love",
        "tags": []
    },

    # 27. Home Alone
    {
        "title": "Home Alone",
        "release_year": 1990,
        "release_month": 11,
        "runtime": 103,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Comedy",
        "secondary_genre": "Fantasy",
        "theme": "Coming of Age",
        "tags": []
    },

    # 28. Die Hard
    {
        "title": "Die Hard",
        "release_year": 1988,
        "release_month": 7,
        "runtime": 132,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Action",
        "secondary_genre": "Thriller",
        "theme": "Heroism",
        "tags": []
    },

    # 29. Love Actually
    {
        "title": "Love Actually",
        "release_year": 2003,
        "release_month": 11,
        "runtime": 135,
        "country": "UK",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Romance",
        "secondary_genre": "Comedy",
        "theme": "Love",
        "tags": []
    },

    # 30. The Nightmare Before Christmas
    {
        "title": "The Nightmare Before Christmas",
        "release_year": 1993,
        "release_month": 10,
        "runtime": 76,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Animation",
        "secondary_genre": "Fantasy",
        "theme": "Coming of Age",
        "tags": []
    },

    # 31. Dangal
    {
        "title": "Dangal",
        "release_year": 2016,
        "release_month": 12,
        "runtime": 161,
        "country": "India",
        "language": "Hindi",
        "mpaa_rating": "PG",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Heroism",
        "tags": []
    },

    # 32. 3 Idiots
    {
        "title": "3 Idiots",
        "release_year": 2009,
        "release_month": 12,
        "runtime": 170,
        "country": "India",
        "language": "Hindi",
        "mpaa_rating": "PG-13",
        "primary_genre": "Comedy",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 33. Baahubali: The Beginning
    {
        "title": "Baahubali: The Beginning",
        "release_year": 2015,
        "release_month": 7,
        "runtime": 159,
        "country": "India",
        "language": "Multilingual",  # Telugu/Tamil
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "Fantasy",
        "theme": "Heroism",
        "tags": []
    },

    # 34. Amélie
    {
        "title": "Amélie",
        "release_year": 2001,
        "release_month": 4,
        "runtime": 122,
        "country": "USA",  # US distribution
        "language": "French",
        "mpaa_rating": "R",
        "primary_genre": "Romance",
        "secondary_genre": "Comedy",
        "theme": "Love",
        "tags": []
    },

    # 35. City of God
    {
        "title": "City of God",
        "release_year": 2002,
        "release_month": 8,
        "runtime": 130,
        "country": "Brazil",
        "language": "Multilingual",  # Portuguese
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Survival",
        "tags": []
    },

    # 36. Spirited Away
    {
        "title": "Spirited Away",
        "release_year": 2001,
        "release_month": 7,
        "runtime": 125,
        "country": "Japan",
        "language": "Japanese",
        "mpaa_rating": "PG",
        "primary_genre": "Animation",
        "secondary_genre": "Fantasy",
        "theme": "Coming of Age",
        "tags": []
    },

    # 37. Black Panther
    {
        "title": "Black Panther",
        "release_year": 2018,
        "release_month": 2,
        "runtime": 134,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "SciFi",
        "theme": "Heroism",
        "tags": []
    },

    # 38. Knives Out
    {
        "title": "Knives Out",
        "release_year": 2019,
        "release_month": 11,
        "runtime": 130,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Thriller",
        "secondary_genre": "Comedy",
        "theme": "Justice",
        "tags": []
    },

    # 39. Joker
    {
        "title": "Joker",
        "release_year": 2019,
        "release_month": 10,
        "runtime": 122,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Betrayal",
        "tags": []
    },

    # 40. 1917
    {
        "title": "1917",
        "release_year": 2019,
        "release_month": 12,
        "runtime": 119,
        "country": "UK",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Action",
        "theme": "Survival",
        "tags": []
    },

    # 41. Moonlight
    {
        "title": "Moonlight",
        "release_year": 2016,
        "release_month": 10,
        "runtime": 111,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Romance",
        "theme": "Coming of Age",
        "tags": []
    },

    # 42. Whiplash
    {
        "title": "Whiplash",
        "release_year": 2014,
        "release_month": 10,
        "runtime": 107,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Coming of Age",
        "tags": []
    },

    # 43. The Social Network
    {
        "title": "The Social Network",
        "release_year": 2010,
        "release_month": 10,
        "runtime": 120,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Betrayal",
        "tags": []
    },

    # 44. Avengers: Endgame
    {
        "title": "Avengers: Endgame",
        "release_year": 2019,
        "release_month": 4,
        "runtime": 181,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "SciFi",
        "theme": "Heroism",
        "tags": []
    },

    # 45. The Lion King (2019)
    {
        "title": "The Lion King",
        "release_year": 2019,
        "release_month": 7,
        "runtime": 118,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Animation",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 46. Frozen II
    {
        "title": "Frozen II",
        "release_year": 2019,
        "release_month": 11,
        "runtime": 103,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Animation",
        "secondary_genre": "Fantasy",
        "theme": "Coming of Age",
        "tags": []
    },

    # 47. A Quiet Place
    {
        "title": "A Quiet Place",
        "release_year": 2018,
        "release_month": 4,
        "runtime": 90,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Horror",
        "secondary_genre": "Thriller",
        "theme": "Survival",
        "tags": []
    },

    # 48. Hereditary
    {
        "title": "Hereditary",
        "release_year": 2018,
        "release_month": 6,
        "runtime": 127,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Drama",
        "theme": "Betrayal",
        "tags": []
    },

    # 49. Us
    {
        "title": "Us",
        "release_year": 2019,
        "release_month": 3,
        "runtime": 116,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Thriller",
        "theme": "Survival",
        "tags": []
    },

    # 50. Midsommar
    {
        "title": "Midsommar",
        "release_year": 2019,
        "release_month": 7,
        "runtime": 148,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Drama",
        "theme": "Betrayal",
        "tags": []
    },

    # 51. Call Me By Your Name
    {
        "title": "Call Me By Your Name",
        "release_year": 2017,
        "release_month": 11,
        "runtime": 132,
        "country": "USA",  # US distribution
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Romance",
        "secondary_genre": "Drama",
        "theme": "Love",
        "tags": []
    },

    # 52. Little Women
    {
        "title": "Little Women",
        "release_year": 2019,
        "release_month": 12,
        "runtime": 135,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Drama",
        "secondary_genre": "Romance",
        "theme": "Coming of Age",
        "tags": []
    },

    # 53. The Irishman
    {
        "title": "The Irishman",
        "release_year": 2019,
        "release_month": 11,
        "runtime": 209,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Redemption",
        "tags": []
    },

    # 54. Once Upon a Time in Hollywood
    {
        "title": "Once Upon a Time in Hollywood",
        "release_year": 2019,
        "release_month": 7,
        "runtime": 161,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Comedy",
        "theme": "Coming of Age",
        "tags": []
    },

    # 55. Marriage Story
    {
        "title": "Marriage Story",
        "release_year": 2019,
        "release_month": 12,
        "runtime": 137,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Romance",
        "theme": "Love",
        "tags": []
    },

    # 56. Ford v Ferrari
    {
        "title": "Ford v Ferrari",
        "release_year": 2019,
        "release_month": 11,
        "runtime": 152,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Drama",
        "secondary_genre": "Action",
        "theme": "Heroism",
        "tags": []
    },

    # 57. Jojo Rabbit
    {
        "title": "Jojo Rabbit",
        "release_year": 2019,
        "release_month": 10,
        "runtime": 108,
        "country": "USA",  # US production/distribution
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Comedy",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 58. The Lighthouse
    {
        "title": "The Lighthouse",
        "release_year": 2019,
        "release_month": 10,
        "runtime": 110,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Drama",
        "theme": "Betrayal",
        "tags": []
    },

    # 59. Uncut Gems
    {
        "title": "Uncut Gems",
        "release_year": 2019,
        "release_month": 12,
        "runtime": 135,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Thriller",
        "secondary_genre": "Drama",
        "theme": "Survival",
        "tags": []
    },

    # 60. The Farewell
    {
        "title": "The Farewell",
        "release_year": 2019,
        "release_month": 7,
        "runtime": 100,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Drama",
        "secondary_genre": "Comedy",
        "theme": "Love",
        "tags": []
    },

    # 61. Booksmart
    {
        "title": "Booksmart",
        "release_year": 2019,
        "release_month": 5,
        "runtime": 102,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Comedy",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 62. Klaus
    {
        "title": "Klaus",
        "release_year": 2019,
        "release_month": 11,
        "runtime": 96,
        "country": "USA",  # Netflix production
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Animation",
        "secondary_genre": "Comedy",
        "theme": "Redemption",
        "tags": []
    },

    # 63. The Two Popes
    {
        "title": "The Two Popes",
        "release_year": 2019,
        "release_month": 12,
        "runtime": 125,
        "country": "UK",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Redemption",
        "tags": []
    },

    # 64. Dolemite Is My Name
    {
        "title": "Dolemite Is My Name",
        "release_year": 2019,
        "release_month": 10,
        "runtime": 118,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Comedy",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 65. The King
    {
        "title": "The King",
        "release_year": 2019,
        "release_month": 10,
        "runtime": 140,
        "country": "UK",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Action",
        "theme": "Heroism",
        "tags": []
    },

    # 66. Hustlers
    {
        "title": "Hustlers",
        "release_year": 2019,
        "release_month": 9,
        "runtime": 110,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Survival",
        "tags": []
    },

    # 67. Shazam!
    {
        "title": "Shazam!",
        "release_year": 2019,
        "release_month": 4,
        "runtime": 132,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "Comedy",
        "theme": "Heroism",
        "tags": []
    },

    # 68. Captain Marvel
    {
        "title": "Captain Marvel",
        "release_year": 2019,
        "release_month": 3,
        "runtime": 124,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "SciFi",
        "theme": "Heroism",
        "tags": []
    },

    # 69. Glass
    {
        "title": "Glass",
        "release_year": 2019,
        "release_month": 1,
        "runtime": 129,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Thriller",
        "secondary_genre": "SciFi",
        "theme": "Heroism",
        "tags": []
    },

    # 70. Alita: Battle Angel
    {
        "title": "Alita: Battle Angel",
        "release_year": 2019,
        "release_month": 2,
        "runtime": 122,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "SciFi",
        "secondary_genre": "Action",
        "theme": "Coming of Age",
        "tags": []
    },

    # 71. Godzilla: King of the Monsters
    {
        "title": "Godzilla: King of the Monsters",
        "release_year": 2019,
        "release_month": 5,
        "runtime": 132,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "SciFi",
        "theme": "Survival",
        "tags": []
    },

    # 72. Aladdin
    {
        "title": "Aladdin",
        "release_year": 2019,
        "release_month": 5,
        "runtime": 128,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Fantasy",
        "secondary_genre": "Romance",
        "theme": "Love",
        "tags": []
    },

    # 73. Dumbo
    {
        "title": "Dumbo",
        "release_year": 2019,
        "release_month": 3,
        "runtime": 112,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Fantasy",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 74. Pet Sematary
    {
        "title": "Pet Sematary",
        "release_year": 2019,
        "release_month": 4,
        "runtime": 101,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Thriller",
        "theme": "Survival",
        "tags": []
    },

    # 75. It Chapter Two
    {
        "title": "It Chapter Two",
        "release_year": 2019,
        "release_month": 9,
        "runtime": 169,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Drama",
        "theme": "Coming of Age",
        "tags": []
    },

    # 76. Doctor Sleep
    {
        "title": "Doctor Sleep",
        "release_year": 2019,
        "release_month": 11,
        "runtime": 152,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Thriller",
        "theme": "Redemption",
        "tags": []
    },

    # 77. Zombieland: Double Tap
    {
        "title": "Zombieland: Double Tap",
        "release_year": 2019,
        "release_month": 10,
        "runtime": 99,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Comedy",
        "secondary_genre": "Horror",
        "theme": "Survival",
        "tags": []
    },

    # 78. Brightburn
    {
        "title": "Brightburn",
        "release_year": 2019,
        "release_month": 5,
        "runtime": 90,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "SciFi",
        "theme": "Betrayal",
        "tags": []
    },

    # 79. Rocketman
    {
        "title": "Rocketman",
        "release_year": 2019,
        "release_month": 5,
        "runtime": 121,
        "country": "UK",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Coming of Age",
        "tags": []
    },

    # 80. Yesterday
    {
        "title": "Yesterday",
        "release_year": 2019,
        "release_month": 6,
        "runtime": 116,
        "country": "UK",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Comedy",
        "secondary_genre": "Romance",
        "theme": "Love",
        "tags": []
    },

    # 81. The Dead Don't Die
    {
        "title": "The Dead Don't Die",
        "release_year": 2019,
        "release_month": 6,
        "runtime": 104,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Comedy",
        "secondary_genre": "Horror",
        "theme": "Survival",
        "tags": []
    },

    # 82. Child's Play
    {
        "title": "Child's Play",
        "release_year": 2019,
        "release_month": 6,
        "runtime": 90,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Horror",
        "secondary_genre": "Thriller",
        "theme": "Survival",
        "tags": []
    },

    # 83. Everything Everywhere All at Once
    {
        "title": "Everything Everywhere All at Once",
        "release_year": 2022,
        "release_month": 3,
        "runtime": 139,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "SciFi",
        "secondary_genre": "Comedy",
        "theme": "Love",
        "tags": []
    },

    # 84. Nomadland
    {
        "title": "Nomadland",
        "release_year": 2020,
        "release_month": 9,
        "runtime": 107,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Survival",
        "tags": []
    },

    # 85. CODA
    {
        "title": "CODA",
        "release_year": 2021,
        "release_month": 8,
        "runtime": 111,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Drama",
        "secondary_genre": "Comedy",
        "theme": "Coming of Age",
        "tags": []
    },

    # 86. Oppenheimer
    {
        "title": "Oppenheimer",
        "release_year": 2023,
        "release_month": 7,
        "runtime": 180,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Heroism",
        "tags": []
    },

    # 87. TÁR
    {
        "title": "TÁR",
        "release_year": 2022,
        "release_month": 10,
        "runtime": 158,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Betrayal",
        "tags": []
    },

    # 88. Top Gun: Maverick
    {
        "title": "Top Gun: Maverick",
        "release_year": 2022,
        "release_month": 5,
        "runtime": 131,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "Drama",
        "theme": "Heroism",
        "tags": []
    },

    # 89. Avatar: The Way of Water
    {
        "title": "Avatar: The Way of Water",
        "release_year": 2022,
        "release_month": 12,
        "runtime": 192,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "SciFi",
        "secondary_genre": "Fantasy",
        "theme": "Survival",
        "tags": []
    },

    # 90. The Batman
    {
        "title": "The Batman",
        "release_year": 2022,
        "release_month": 3,
        "runtime": 176,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "Thriller",
        "theme": "Justice",
        "tags": []
    },

    # 91. Dune
    {
        "title": "Dune",
        "release_year": 2021,
        "release_month": 10,
        "runtime": 155,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "SciFi",
        "secondary_genre": "Action",
        "theme": "Heroism",
        "tags": []
    },

    # 92. No Time to Die
    {
        "title": "No Time to Die",
        "release_year": 2021,
        "release_month": 10,
        "runtime": 163,
        "country": "UK",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Action",
        "secondary_genre": "Thriller",
        "theme": "Heroism",
        "tags": []
    },

    # 93. West Side Story
    {
        "title": "West Side Story",
        "release_year": 2021,
        "release_month": 12,
        "runtime": 156,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Romance",
        "secondary_genre": "Drama",
        "theme": "Love",
        "tags": []
    },

    # 94. The Power of the Dog
    {
        "title": "The Power of the Dog",
        "release_year": 2021,
        "release_month": 11,
        "runtime": 126,
        "country": "USA",  # US/NZ co-production
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Betrayal",
        "tags": []
    },

    # 95. Minari
    {
        "title": "Minari",
        "release_year": 2020,
        "release_month": 2,
        "runtime": 115,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Coming of Age",
        "tags": []
    },

    # 96. Sound of Metal
    {
        "title": "Sound of Metal",
        "release_year": 2020,
        "release_month": 11,
        "runtime": 120,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Coming of Age",
        "tags": []
    },

    # 97. The Father
    {
        "title": "The Father",
        "release_year": 2020,
        "release_month": 12,
        "runtime": 97,
        "country": "UK",
        "language": "English",
        "mpaa_rating": "PG-13",
        "primary_genre": "Drama",
        "secondary_genre": "Thriller",
        "theme": "Love",
        "tags": []
    },

    # 98. Judas and the Black Messiah
    {
        "title": "Judas and the Black Messiah",
        "release_year": 2021,
        "release_month": 2,
        "runtime": 126,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Drama",
        "secondary_genre": "Documentary",
        "theme": "Betrayal",
        "tags": []
    },

    # 99. Promising Young Woman
    {
        "title": "Promising Young Woman",
        "release_year": 2020,
        "release_month": 12,
        "runtime": 113,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "R",
        "primary_genre": "Thriller",
        "secondary_genre": "Drama",
        "theme": "Justice",
        "tags": []
    },

    # 100. Soul
    {
        "title": "Soul",
        "release_year": 2020,
        "release_month": 12,
        "runtime": 100,
        "country": "USA",
        "language": "English",
        "mpaa_rating": "PG",
        "primary_genre": "Animation",
        "secondary_genre": "Fantasy",
        "theme": "Coming of Age",
        "tags": []
    }
]

# Now assign tags to each movie based on its characteristics
def assign_tags_to_movie(movie):
    """Assign relevant tags to a movie based on its characteristics"""
    tags = []

    # Check for sequels
    sequel_keywords = ['II', '2', 'Two', 'Double', 'Chapter']
    if any(keyword in movie['title'] for keyword in sequel_keywords):
        tags.append('Sequel')

    # Check for remakes
    remake_titles = ['The Lion King', 'Aladdin', 'Dumbo', 'Pet Sematary', 'Child\'s Play', 'West Side Story']
    if movie['title'] in remake_titles and movie['release_year'] > 2010:
        tags.append('Remake')

    # Oscar winners (based on actual wins)
    oscar_winners = ['The Shape of Water', 'Parasite', 'Moonlight', '12 Years a Slave',
                     'Everything Everywhere All at Once', 'Nomadland', 'CODA', 'Oppenheimer',
                     'The Father', 'Soul', 'Judas and the Black Messiah', 'Sound of Metal',
                     'Minari', 'Promising Young Woman', 'Another Round', 'Free Solo',
                     'Spider-Man: Into the Spider-Verse', 'Black Panther', 'La La Land',
                     'Mad Max: Fury Road', 'Whiplash', 'The Grand Budapest Hotel',
                     'Coco', 'Get Out', 'The Irishman', 'Marriage Story', 'Ford v Ferrari',
                     'Jojo Rabbit', 'Little Women', '1917', 'Once Upon a Time in Hollywood',
                     'Joker', 'Rocketman', 'Toy Story 4', 'Klaus', 'The Two Popes',
                     'Dune', 'West Side Story', 'The Power of the Dog', 'Pan\'s Labyrinth',
                     'Spirited Away', 'March of the Penguins', 'Inception', 'The Matrix',
                     'The Dark Knight', 'Blade Runner 2049', 'Call Me By Your Name',
                     'Frozen II', 'The Social Network']
    if movie['title'] in oscar_winners:
        tags.append('Oscar Winner')

    # Festival favorites
    festival_favorites = ['Parasite', 'The Lighthouse', 'Uncut Gems', 'The Farewell',
                          'Hereditary', 'Mad Max: Fury Road', 'Pan\'s Labyrinth',
                          'City of God', 'Baahubali: The Beginning', 'The Grand Budapest Hotel',
                          'TÁR', 'Minari', 'The Shape of Water', 'Free Solo', 'Midsommar',
                          'Blade Runner 2049']
    if movie['title'] in festival_favorites:
        tags.append('Festival Favorite')

    # Cult classics
    cult_classics = ['The Matrix', 'Mad Max: Fury Road', 'The Dark Knight', 'John Wick',
                     'Halloween', 'The Nightmare Before Christmas', 'Home Alone',
                     'Die Hard', 'Spirited Away', 'Amélie', 'The Shawshank Redemption',
                     'Eternal Sunshine of the Spotless Mind', 'Superbad', '3 Idiots',
                     'Gone Girl', 'Zodiac', 'Knives Out', 'A Quiet Place', 'Us',
                     'Once Upon a Time in Hollywood', 'Everything Everywhere All at Once',
                     'Inception', 'Get Out']
    if movie['title'] in cult_classics:
        tags.append('Cult Classic')

    # Based on book
    based_on_book = ['The Shawshank Redemption', '12 Years a Slave', 'The Notebook',
                      'Gone Girl', 'Zodiac', 'The Conjuring', 'Call Me By Your Name',
                      'Little Women', 'The Irishman', 'Dune', 'The Power of the Dog',
                      'The Social Network', 'Pet Sematary', 'It Chapter Two', 'Doctor Sleep',
                      'The Dark Knight', 'Spider-Man: Into the Spider-Verse', 'Black Panther',
                      'Joker', 'Captain Marvel', 'Shazam!', 'Alita: Battle Angel',
                      'Avengers: Endgame', 'The Batman', 'Ford v Ferrari', 'Hustlers',
                      'The King', 'Dangal', '3 Idiots', 'The Father', 'City of God']
    if movie['title'] in based_on_book:
        tags.append('Based on Book')

    # Family friendly
    if movie['mpaa_rating'] in ['G', 'PG']:
        tags.append('Family Friendly')

    # Graphic violence
    violent_movies = ['Mad Max: Fury Road', 'John Wick', 'The Dark Knight', 'Die Hard',
                      'Joker', 'Child\'s Play', 'Brightburn']
    if movie['title'] in violent_movies or (movie['primary_genre'] == 'Horror' and movie['mpaa_rating'] == 'R'):
        tags.append('Graphic Violence')

    # Strong romance
    romance_movies = ['The Notebook', 'La La Land', 'Eternal Sunshine of the Spotless Mind',
                      'Call Me By Your Name', 'Amélie', 'Love Actually', 'The Shape of Water',
                      'Marriage Story', 'Superbad', 'Yesterday', 'Aladdin', 'West Side Story',
                      'Little Women', 'Moonlight']
    if movie['title'] in romance_movies or movie['theme'] == 'Love':
        tags.append('Strong Romance')

    # Holiday movies
    if 'Christmas' in movie['title'] or movie['title'] in ['Home Alone', 'Die Hard', 'Love Actually', 'Klaus']:
        tags.append('Christmas')
    if 'Halloween' in movie['title'] or movie['title'] in ['The Nightmare Before Christmas']:
        tags.append('Halloween')
    if movie['title'] in ['La La Land', 'The Notebook', 'Love Actually']:
        tags.append('Valentine')

    # Independent films
    indie_films = ['Everything Everywhere All at Once', 'The Lighthouse', 'Uncut Gems',
                   'The Farewell', 'Booksmart', 'Hereditary', 'Midsommar', 'Whiplash',
                   'Moonlight', 'Sound of Metal', 'Minari', 'Nomadland', 'The Grand Budapest Hotel',
                   'Eternal Sunshine of the Spotless Mind', 'Pan\'s Labyrinth', 'Amélie',
                   'City of God', 'Parasite', 'TÁR', 'The Dead Don\'t Die']
    if movie['title'] in indie_films:
        tags.append('Independent Film')

    # Biographical
    bio_films = ['12 Years a Slave', 'Dangal', 'The Social Network', 'Oppenheimer',
                 'Judas and the Black Messiah', 'Rocketman', 'The Two Popes',
                 'Dolemite Is My Name', 'Ford v Ferrari']
    if movie['title'] in bio_films:
        tags.append('Biographical')

    # Historical
    historical_films = ['12 Years a Slave', '1917', 'The King', 'Judas and the Black Messiah',
                        'Oppenheimer', 'Jojo Rabbit', 'Dunkirk']
    if movie['title'] in historical_films:
        tags.append('Historical')

    # Indian cinema tags
    if movie['country'] == 'India':
        if movie['language'] == 'Hindi':
            tags.append('Bollywood')
        elif movie['language'] == 'Telugu':
            tags.append('Tollywood')
        else:
            tags.append('Regional Cinema')

    # Japanese cinema tags
    if movie['country'] == 'Japan':
        if movie['primary_genre'] == 'Animation':
            tags.append('Anime')
        else:
            tags.append('J-Drama')

    # Assign streaming platforms (based on current availability)
    streaming_assignments = {
        'Netflix': ['The Dark Knight', 'John Wick', 'Superbad', 'La La Land', 'The Notebook',
                    'Love Actually', 'The Irishman', 'Marriage Story', 'The Two Popes',
                    'Dolemite Is My Name', 'The King', 'Klaus', 'The Social Network',
                    'Knives Out', 'Moonlight', 'The Power of the Dog', 'Dangal',
                    'Baahubali: The Beginning', 'Spider-Man: Into the Spider-Verse',
                    'Uncut Gems', 'Zombieland: Double Tap', 'Once Upon a Time in Hollywood',
                    'The Father', 'Little Women'],
        'Amazon Prime': ['The Shawshank Redemption', 'Get Out', 'Zodiac', 'Blade Runner 2049',
                         'Eternal Sunshine of the Spotless Mind', 'Amélie', '3 Idiots',
                         'Hereditary', 'Midsommar', 'Us', 'The Farewell', 'The Lighthouse',
                         'Yesterday', 'Child\'s Play', 'Brightburn', 'Whiplash', 'Sound of Metal',
                         'Minari', 'Promising Young Woman', 'No Time to Die', 'Oppenheimer',
                         'City of God', '1917'],
        'Disney+': ['Free Solo', 'March of the Penguins', 'Coco', 'Toy Story 4', 'Home Alone',
                    'The Nightmare Before Christmas', 'Black Panther', 'Avengers: Endgame',
                    'The Lion King', 'Frozen II', 'Aladdin', 'Dumbo', 'Captain Marvel',
                    'Ford v Ferrari', 'Jojo Rabbit', 'Soul', 'West Side Story', 'Alita: Battle Angel',
                    'Avatar: The Way of Water'],
        'HBO Max': ['The Conjuring', 'Inception', 'The Matrix', 'Pan\'s Labyrinth', 'Spirited Away',
                    'Joker', 'Shazam!', 'Glass', 'Godzilla: King of the Monsters', 'It Chapter Two',
                    'Doctor Sleep', 'Judas and the Black Messiah', 'The Batman', 'Dune',
                    'City of God'],
        'Hulu': ['The Grand Budapest Hotel', 'Parasite', 'Gone Girl', 'The Shape of Water',
                 'Die Hard', 'Call Me By Your Name', 'Booksmart', 'The Dead Don\'t Die',
                 'Hustlers', 'Another Round', 'Nomadland'],
        'Apple TV+': ['CODA'],
        'Peacock': ['Halloween', 'A Quiet Place']
    }

    for platform, titles in streaming_assignments.items():
        if movie['title'] in titles:
            tags.append(platform)
        else:
            tags.append("Amazon Prime");

    return tags

# Assign tags to all movies
for movie in movies_data:
    movie['tags'] = assign_tags_to_movie(movie)
    movie['tags_str'] = ";".join(set(movie['tags']))

# Create DataFrame
movies_df = pd.DataFrame(movies_data)

# Add movie IDs
movies_df['movie_id'] = ['mv' + str(i).zfill(5) for i in range(1, len(movies_df) + 1)]

# Reorder columns
columns_order = ['movie_id', 'title', 'release_year', 'release_month', 'runtime',
                 'country', 'language', 'mpaa_rating', 'primary_genre',
                 'secondary_genre', 'theme', 'tags_str']
movies_df = movies_df[columns_order]

# Download the file in Colab (uncomment when running in Colab)
# from google.colab import files

"""##2."""

print("\nSample data:")
print(movies_df)

# Save to CSV
csv_filename = 'real_movies_100_complete.csv'
movies_df.to_csv(csv_filename, index=False)
print(f"CSV file '{csv_filename}' has been created with {len(movies_df)} movies.")
print(f"\nAll {len(movies_df)} movies have been updated with complete information.")
print("\nSample data:")
print(movies_df.head())

print(movies_df.iloc[1])

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import random
import uuid
from textblob import TextBlob

# Configuration
NUM_MOVIES = 100
NUM_USERS = 50000
GENRES = ['Action', 'Comedy', 'Drama', 'Horror', 'SciFi', 'Romance', 'Documentary', 'Animation', 'Thriller', 'Fantasy']
MOODS = ['Happy', 'Sad', 'Stressed', 'Relaxed', 'Excited', 'Bored']
THEMES = ['Love', 'Revenge', 'Heroism', 'Betrayal', 'Survival', 'Coming of Age', 'Redemption', 'Justice']
HOLIDAYS = ['Christmas', 'Halloween', 'Diwali', 'Easter', 'Thanksgiving', 'Valentine', 'Holi', 'None']
WEATHER = ['Sunny', 'Rainy', 'Snowy', 'Cloudy', 'Windy']
SEASONS = ['Winter', 'Spring', 'Summer', 'Fall']
RATINGS = ['G', 'PG', 'PG-13', 'R', 'NC-17']
COUNTRIES = ['USA', 'UK', 'Canada', 'Australia', 'Germany', 'Japan', 'Brazil', 'India']
STREAMING_PLATFORMS = ['Netflix', 'Amazon Prime', 'Hulu', 'Disney+', 'HBO Max', 'Apple TV+', 'Peacock']
LANGUAGES = ['English', 'Spanish', 'Hindi', 'French', 'Japanese', 'German', 'Multilingual']

# Tag Weights
TAG_WEIGHTS = {
    'Christmas': 0.3, 'Halloween': 0.25, 'Diwali': 0.15, 'Holi': 0.12,
    'Easter': 0.1, 'Thanksgiving': 0.2, 'Valentine': 0.18,
    'Cult Classic': 0.4, 'Oscar Winner': 0.25, 'Based on Book': 0.35,
    'Sequel': 0.2, 'Remake': 0.15, 'Family Friendly': 0.3,
    'Graphic Violence': 0.1, 'Strong Romance': 0.25, 'Festival Favorite': 0.2,
    'Independent Film': 0.15, 'Biographical': 0.1, 'Historical': 0.15,
    'Bollywood': 0.16, 'Tollywood': 0.26, 'Regional Cinema': 0.08,
    'Anime': 0.4, 'J-Drama': 0.2, 'Samurai': 0.1
}

# Geographic data
GEO_DATA = {
    'USA': {
        'cities': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia'],
        'states': ['NY', 'CA', 'IL', 'TX', 'AZ', 'PA']
    },
    'UK': {
        'cities': ['London', 'Manchester', 'Birmingham', 'Liverpool', 'Glasgow', 'Edinburgh'],
        'states': ['England', 'Scotland', 'Wales', 'Northern Ireland']
    },
    'Canada': {
        'cities': ['Toronto', 'Montreal', 'Vancouver', 'Calgary', 'Ottawa', 'Edmonton'],
        'states': ['ON', 'QC', 'BC', 'AB', 'MB', 'SK']
    },
    'Australia': {
        'cities': ['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Adelaide', 'Canberra'],
        'states': ['NSW', 'VIC', 'QLD', 'WA', 'SA', 'ACT']
    },
    'Germany': {
        'cities': ['Berlin', 'Hamburg', 'Munich', 'Cologne', 'Frankfurt', 'Stuttgart'],
        'states': ['Berlin', 'Bavaria', 'Hamburg', 'Hesse', 'Baden-Württemberg']
    },
    'Japan': {
        'cities': ['Tokyo', 'Osaka', 'Kyoto', 'Yokohama', 'Nagoya', 'Sapporo'],
        'states': ['Tokyo', 'Osaka', 'Kyoto', 'Kanagawa', 'Aichi', 'Hokkaido']
    },
    'Brazil': {
        'cities': ['São Paulo', 'Rio de Janeiro', 'Brasília', 'Salvador', 'Fortaleza', 'Belo Horizonte'],
        'states': ['SP', 'RJ', 'DF', 'BA', 'CE', 'MG']
    },
    'India': {
        'cities': ['Mumbai', 'Delhi', 'Bangalore', 'Hyderabad', 'Chennai', 'Kolkata'],
        'states': ['Maharashtra', 'Delhi', 'Karnataka', 'Telangana', 'Tamil Nadu', 'West Bengal']
    }
}

# Current events configuration
CURRENT_EVENTS = {
    'plane_crash': {'keywords': ['aviation', 'crash', 'disaster', 'safety'], 'weight': 0.85},
    'elections': {'keywords': ['politics', 'vote', 'democracy', 'government'], 'weight': 0.75},
    'world_cup': {'keywords': ['soccer', 'football', 'tournament', 'sports'], 'weight': 0.9},
    'tech_breakthrough': {'keywords': ['innovation', 'technology', 'future', 'science'], 'weight': 0.7},
    'none': {'keywords': [], 'weight': 0.0}
}

# ======================
# HELPER FUNCTIONS
# ======================

def get_holiday_relevance(release_month, country):
    """Assign holiday relevance based on release month and cultural context"""
    relevance = {}

    # Western holidays
    if country in ['USA', 'UK', 'Canada', 'Australia', 'Germany']:
        relevance['Christmas'] = 0.8 if release_month == 12 else 0.1
        relevance['Halloween'] = 0.7 if release_month == 10 else 0.05
        relevance['Easter'] = 0.6 if release_month == 3 else 0.1
        relevance['Thanksgiving'] = 0.65 if release_month == 11 else 0.05
        relevance['Valentine'] = 0.7 if release_month == 2 else 0.1

    # Indian holidays
    if country == 'India':
        relevance['Diwali'] = 0.9 if release_month == 10 or release_month == 11 else 0.1
        relevance['Holi'] = 0.85 if release_month == 3 else 0.05
        relevance['Christmas'] = 0.4 if release_month == 12 else 0.05

    # Japanese holidays
    if country == 'Japan':
        relevance['New Year'] = 0.8 if release_month == 1 else 0.05
        relevance['Golden Week'] = 0.7 if release_month == 4 or release_month == 5 else 0.05

    # Brazilian holidays
    if country == 'Brazil':
        relevance['Carnival'] = 0.85 if release_month == 2 or release_month == 3 else 0.05

    return relevance

def generate_title_sentiment(title):
    # Analyze title sentiment
    blob = TextBlob(title)
    sentiment = blob.sentiment.polarity
    return sentiment

def get_age_based_patterns(age):
    if age < 25:
        return {'trend_affinity': 0.8, 'binge_score': 0.7, 'social_engagement': 0.9}
    elif age < 40:
        return {'trend_affinity': 0.6, 'binge_score': 0.5, 'social_engagement': 0.7}
    else:
        return {'trend_affinity': 0.3, 'binge_score': 0.4, 'social_engagement': 0.5}

def get_mood_based_patterns(mood):
    patterns = {
        'Happy': {'rewatch_ratio': 0.3, 'genre_affinity': 'Comedy'},
        'Sad': {'rewatch_ratio': 0.7, 'genre_affinity': 'Drama'},
        'Stressed': {'rewatch_ratio': 0.6, 'genre_affinity': 'Documentary'},
        'Relaxed': {'rewatch_ratio': 0.4, 'genre_affinity': 'Romance'},
        'Excited': {'rewatch_ratio': 0.2, 'genre_affinity': 'Action'},
        'Bored': {'rewatch_ratio': 0.8, 'genre_affinity': 'Horror'}
    }
    return patterns.get(mood, {'rewatch_ratio': 0.5, 'genre_affinity': 'Comedy'})

def get_geographic_patterns(country, city):
    patterns = {}

    if country == 'USA':
        if 'New York' in city:
            patterns = {'session_length': 45, 'peak_hour': 21, 'documentary_affinity': 0.4}
        elif 'Los Angeles' in city:
            patterns = {'session_length': 55, 'peak_hour': 20, 'documentary_affinity': 0.3}
        else:
            patterns = {'session_length': 50, 'peak_hour': 19, 'documentary_affinity': 0.2}

    elif country == 'UK':
        if 'London' in city:
            patterns = {'session_length': 40, 'peak_hour': 20, 'documentary_affinity': 0.5}
        else:
            patterns = {'session_length': 45, 'peak_hour': 19, 'documentary_affinity': 0.4}

    else:
        patterns = {
            'session_length': 40 + (len(city) % 20),
            'peak_hour': 18 + (len(country) % 4),
            'documentary_affinity': 0.3 + (len(city) * 0.01)
        }

    if 'Rainy' in WEATHER or 'Snowy' in WEATHER:
        patterns['weather_impact'] = 1.6
    else:
        patterns['weather_impact'] = 1.0

    return patterns

def calculate_event_relevance(title, tags, current_event):
    """Calculate relevance to current events using keyword matching"""
    if current_event['weight'] == 0.0:
        return 0.0

    title_score = 0
    tag_score = 0

    # Check title relevance
    for keyword in current_event['keywords']:
        if keyword in title.lower():
            title_score += 0.5

    # Check tag relevance
    for keyword in current_event['keywords']:
        if keyword in tags.lower():
            tag_score += 0.3

    # Normalize scores
    title_score = min(1.0, title_score)
    tag_score = min(1.0, tag_score)

    return current_event['weight'] * (title_score + tag_score)

def get_trending_score(title):
    """Simulate trending score from social media"""
    base_score = random.betavariate(1.5, 4)
    boost = 0.0

    if random.random() < 0.05:
        boost = random.uniform(0.3, 0.8)

    current_event = random.choice(list(CURRENT_EVENTS.values()))
    for keyword in current_event['keywords']:
        if keyword in title.lower():
            boost += current_event['weight'] * 0.5

    return min(1.0, base_score + boost)

# ======================
# MOVIE FEATURE ENGINEERING
# ======================

def generate_synthetic_movies():
    movies_df["title_sentiment"] = 0.0
    movies_df["release_season"] = ""
    movies_df["days_since_release"] = 0
    movies_df["decay_factor"] = 0.0
    movies_df["is_new_release"] = 0
    movies_df["holiday_boost"] = 0.0

    # Initialize violence/content level columns
    movies_df["violence_level"] = 0.0
    movies_df["romance_level"] = 0.0
    movies_df["humor_level"] = 0.0
    movies_df["complexity_score"] = 0.0

    # Initialize all possible holiday columns
    all_possible_holidays = set()
    for country in COUNTRIES:
        for month in range(1, 13):
            rel = get_holiday_relevance(month, country)
            all_possible_holidays.update(rel.keys())

    for holiday in all_possible_holidays:
        movies_df[f"holiday_{holiday}"] = 0.0

    # Initialize popularity and engagement columns
    movies_df["avg_rating"] = 0.0
    movies_df["rating_count"] = 0
    movies_df["box_office"] = 0.0
    movies_df["rewatch_score"] = 0.0
    movies_df["critical_acclaim"] = 0.0
    movies_df["award_nominations"] = 0
    movies_df["imdb_rank"] = None

    # Initialize contextual feature columns
    movies_df["weather_affinity"] = ""
    movies_df["mood_intensity"] = 0.0
    movies_df["family_friendly"] = 0
    movies_df["cultural_specificity"] = 0.0

    # Initialize trend-aware feature columns
    movies_df["current_event_relevance"] = 0.0
    movies_df["trending_score"] = 0.0
    movies_df["social_media_mentions"] = 0
    movies_df["search_volume"] = 0
    movies_df["viral_potential"] = 0.0

    # Initialize composite feature columns
    movies_df["engagement_score"] = 0.0
    movies_df["rewatchability"] = 0.0

    current_year = datetime.now().year

    for index_id in range(len(movies_df)):

        # META DATA - title sentiment
        title = movies_df.at[index_id, "title"]
        title_sentiment = generate_title_sentiment(title)
        movies_df.at[index_id, "title_sentiment"] = title_sentiment

        # TEMPORAL FEATURES
        release_month = movies_df.at[index_id, "release_month"]
        release_year = movies_df.at[index_id, "release_year"]
        country = movies_df.at[index_id, "country"]
        tags_str = movies_df.at[index_id, "tags_str"]
        primary_genre = movies_df.at[index_id, "primary_genre"]
        mpaa_rating = movies_df.at[index_id, "mpaa_rating"]

        release_season = SEASONS[(release_month - 1) // 3]  # Fixed calculation
        days_since_release = (datetime.now() - datetime(release_year, release_month, 1)).days
        decay_factor = max(0.1, np.exp(-days_since_release / (365 * 8)))

        movies_df.at[index_id, "release_season"] = release_season
        movies_df.at[index_id, "days_since_release"] = days_since_release
        movies_df.at[index_id, "decay_factor"] = decay_factor
        movies_df.at[index_id, "is_new_release"] = 1 if days_since_release < 90 else 0

        # CONTENT FEATURES
        violence_level = np.random.beta(1.5, 3) if primary_genre in ['Action', 'Horror'] else np.random.beta(0.5, 4)
        romance_level = np.random.beta(2, 2) if primary_genre == 'Romance' else np.random.beta(0.8, 3)
        humor_level = np.random.beta(2, 1.5) if primary_genre == 'Comedy' else np.random.beta(1, 3)
        complexity_score = np.random.beta(1, 2)

        movies_df.at[index_id, "violence_level"] = violence_level
        movies_df.at[index_id, "romance_level"] = romance_level
        movies_df.at[index_id, "humor_level"] = humor_level
        movies_df.at[index_id, "complexity_score"] = complexity_score

        # HOLIDAY RELEVANCE
        holiday_relevance = get_holiday_relevance(release_month, country)
        for holiday, score in holiday_relevance.items():
            movies_df.at[index_id, f"holiday_{holiday}"] = score
        movies_df.at[index_id, "holiday_boost"] = max(holiday_relevance.values(), default=1.0)

        # POPULARITY & ENGAGEMENT
        avg_rating = round(np.random.normal(6.5, 1.5), 1)
        avg_rating = min(10, max(1, avg_rating))
        movies_df.at[index_id, "avg_rating"] = avg_rating

        rating_count = int(np.random.pareto(1.5) * 50000)
        movies_df.at[index_id, "rating_count"] = rating_count

        box_office = np.random.exponential(100)
        movies_df.at[index_id, "box_office"] = box_office

        rewatch_score = np.random.beta(2, 3)
        movies_df.at[index_id, "rewatch_score"] = rewatch_score

        critical_acclaim = np.random.beta(0.8, 3)
        movies_df.at[index_id, "critical_acclaim"] = critical_acclaim

        award_nominations = int(np.random.pareto(2) * 10)
        movies_df.at[index_id, "award_nominations"] = award_nominations

        imdb_rank = random.randint(1, 10000) if random.random() < 0.7 else None
        movies_df.at[index_id, "imdb_rank"] = imdb_rank

        # CONTEXTUAL FEATURES
        weather_affinity = random.choice(WEATHER)
        mood_intensity = np.random.beta(2, 3)
        family_friendly = 1 if mpaa_rating in ['G', 'PG'] else 0
        cultural_specificity = np.random.beta(0.5, 3) if country != 'USA' else 0

        movies_df.at[index_id, "weather_affinity"] = weather_affinity
        movies_df.at[index_id, "mood_intensity"] = mood_intensity
        movies_df.at[index_id, "family_friendly"] = family_friendly
        movies_df.at[index_id, "cultural_specificity"] = cultural_specificity

        # TREND-AWARE FEATURES
        current_event = random.choice(list(CURRENT_EVENTS.values()))
        event_relevance = calculate_event_relevance(title, tags_str, current_event)
        trending_score = get_trending_score(title)

        movies_df.at[index_id, "current_event_relevance"] = event_relevance
        movies_df.at[index_id, "trending_score"] = trending_score
        movies_df.at[index_id, "social_media_mentions"] = int(rating_count * trending_score / 100)
        movies_df.at[index_id, "search_volume"] = int(rating_count * event_relevance / 50)
        movies_df.at[index_id, "viral_potential"] = min(1.0, event_relevance * 0.7 + trending_score * 0.3)

        # COMPOSITE FEATURES
        engagement_score = min(1, (0.25 * min(1, rating_count/50000)) +
                              (0.25 * min(1, box_office/500)) +
                              (0.25 * rewatch_score) +
                              (0.25 * trending_score))

        rewatchability = min(1, (0.5 * rewatch_score) + (0.3 * mood_intensity) + (0.2 * title_sentiment))

        movies_df.at[index_id, "engagement_score"] = engagement_score
        movies_df.at[index_id, "rewatchability"] = rewatchability

    return movies_df

# ======================
# USER FEATURE ENGINEERING
# ======================

def generate_synthetic_users(num_users):
    users = []
    countries = list(GEO_DATA.keys())

    for user_id in range(1, num_users + 1):
        # DEMOGRAPHIC FEATURES
        age = random.randint(18, 70)
        gender = random.choice(['Male', 'Female', 'Other'])
        country = random.choice(countries)

        geo = GEO_DATA[country]
        city_idx = random.randint(0, len(geo['cities'])-1)
        city = geo['cities'][city_idx]
        state = geo['states'][city_idx % len(geo['states'])]

        timezone = random.choice([-12, -8, -5, 0, 1, 3, 5, 8, 10])

        # USER BEHAVIOR - Core viewing patterns
        genre_weights = np.random.dirichlet(np.ones(len(GENRES)))
        genre_prefs = dict(zip(GENRES, genre_weights / sum(genre_weights)))
        completion_rate = np.random.beta(5, 1.5)
        binge_score = min(1, np.random.beta(1, 3))
        rewatch_ratio = np.random.beta(1.5, 4)
        rating_freq = np.random.beta(2, 5)
        autoplay_accept = np.random.beta(3, 2)
        search_usage = np.random.beta(1, 4)

        # MOOD & CONTEXT
        current_mood = random.choice(MOODS)
        weather = random.choice(WEATHER)
        season = SEASONS[(datetime.now().month - 1) // 3]  # Fixed calculation
        lang_pref = random.choice(['English', 'Spanish', 'Hindi', 'French', 'Japanese', 'German'])
        subtitle_usage = np.random.beta(0.5, 3)

        # Apply geographic patterns
        geo_patterns = get_geographic_patterns(country, city)

        # TEMPORAL PATTERNS
        peak_hour = geo_patterns.get('peak_hour', random.randint(18, 23))
        weekend_ratio = np.random.beta(3, 2)
        session_length = geo_patterns.get('session_length', max(20, np.random.exponential(40)))
        last_watch_hours = min(168, np.random.exponential(48))
        daily_consistency = np.random.beta(4, 1.5)

        # TREND & SOCIAL
        age_patterns = get_age_based_patterns(age)
        trend_affinity = age_patterns['trend_affinity'] * np.random.beta(2, 2)
        friend_influence = np.random.beta(1, 3)
        social_eng = age_patterns['social_engagement'] * np.random.beta(2, 3)
        group_watch = np.random.beta(0.3, 5)

        # WEATHER & CONTEXTUAL
        weather_impact = geo_patterns.get('weather_impact', 1.6 if weather == 'Rainy' else 1.0)
        seasonal_pref = np.random.beta(1.5, 2)
        location_match = np.random.beta(1, 3)
        holiday_boost = np.random.beta(0.8, 4)

        # Apply mood-based patterns
        mood_patterns = get_mood_based_patterns(current_mood)
        rewatch_ratio *= mood_patterns['rewatch_ratio']
        mood_alignment = genre_prefs.get(mood_patterns['genre_affinity'], 0)

        # Apply age-based patterns
        binge_score *= age_patterns['binge_score']

        # NEW TREND-AWARE FEATURES
        event_interest = random.betavariate(1.5, 3)
        if random.random() < 0.2:
            event_interest = random.uniform(0.7, 1.0)
        social_media_activity = random.betavariate(1.2, 3)
        trend_responsiveness = min(1.0, event_interest * 0.6 + social_media_activity * 0.4)
        current_event_engagement = min(1.0, event_interest * random.uniform(0.8, 1.2))

        # COMPOSITE FEATURES
        engagement_score = min(1, (0.3*completion_rate) + (0.2*rating_freq) +
                              (0.2*autoplay_accept) + (0.3*social_eng))

        personalization_score = min(1, mood_alignment * (1 + friend_influence))

        contextual_fit = min(1, (last_watch_hours/48) * weather_impact *
                            (1 + holiday_boost/2))

        # Create user record
        user_record = {
            # DEMOGRAPHIC
            'user_id': f"user_{str(uuid.uuid4().int)[:8]}",
            'age': age,
            'gender': gender,
            'country': country,
            'state': state,
            'city': city,
            'timezone': timezone,

            # BEHAVIOR
            'genre_affinity': max(genre_prefs, key=genre_prefs.get),
            'completion_rate': completion_rate,
            'binge_score': binge_score,
            'rewatch_ratio': rewatch_ratio,
            'rating_frequency': rating_freq,
            'autoplay_acceptance': autoplay_accept,
            'search_usage': search_usage,
            'content_diversity': 1 - max(genre_prefs.values()),

            # MOOD & CONTEXT
            'current_mood': current_mood,
            'weather': weather,
            'season': season,
            'language_preference': lang_pref,
            'subtitle_usage': subtitle_usage,

            # TEMPORAL
            'peak_viewing_time': peak_hour,
            'weekend_ratio': weekend_ratio,
            'session_length_avg': session_length,
            'time_since_last_watch': last_watch_hours,
            'daily_consistency': daily_consistency,

            # TREND & SOCIAL
            'trend_affinity': trend_affinity,
            'friend_influence': friend_influence,
            'social_engagement': social_eng,
            'group_watch_freq': group_watch,
            'viral_content_affinity': trend_affinity * 1.2,

            # WEATHER & CONTEXTUAL
            'weather_impact': weather_impact,
            'seasonal_content_pref': seasonal_pref,
            'location_content_match': location_match,
            'holiday_boost': holiday_boost,

            # COMPOSITE
            'engagement_score': engagement_score,
            'mood_genre_alignment': mood_alignment,
            'personalization_score': personalization_score,
            'contextual_fit': contextual_fit,

            # ADDITIONAL FEATURES
            'new_release_responsiveness': min(1, trend_affinity * 1.3),
            'documentary_affinity': genre_prefs.get('Documentary', 0),
            'morning_view_ratio': max(0, 1 - weekend_ratio - 0.3),
            'device_engagement': np.random.beta(2, 2),
            'cultural_affinity': 1 if country in ['Japan', 'India', 'Brazil'] else 0,

            # NEW TREND-AWARE FEATURES
            'event_interest': event_interest,
            'social_media_activity': social_media_activity,
            'trend_responsiveness': trend_responsiveness,
            'current_event_engagement': current_event_engagement
        }
        users.append(user_record)

    return pd.DataFrame(users)

# ======================
# DATA GENERATION AND SAVING
# ======================

if __name__ == "__main__":
    print(f"Creating {NUM_MOVIES} synthetic movies with trend-aware features...")
    movie_start = datetime.now()
    movie_df = generate_synthetic_movies()
    movie_time = (datetime.now() - movie_start).total_seconds()

    print(f"Creating {NUM_USERS} synthetic users with trend-aware features...")
    user_start = datetime.now()
    user_df = generate_synthetic_users(NUM_USERS)
    user_time = (datetime.now() - user_start).total_seconds()

    # Save datasets
    movie_file = f"trend_aware_movies_{NUM_MOVIES}_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
    user_file = f"trend_aware_users_{NUM_USERS}_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"

    movie_df.to_csv(movie_file, index=False)
    user_df.to_csv(user_file, index=False)

    print("\n" + "="*50)
    print(f"Generated {len(movie_df)} movies in {movie_time:.2f} seconds")
    print(f"Movie features: {len(movie_df.columns)}")
    print(f"Sample movie data:")
    print(movie_df.head())

    print("\n" + "-"*50)
    print(f"Generated {len(user_df)} users in {user_time:.2f} seconds")
    print(f"User features: {len(user_df.columns)}")
    print(f"Sample user data:")
    print(user_df.head())

    print("\n" + "="*50)
    print(f"Movie file saved to: {movie_file}")
    print(f"User file saved to: {user_file}")

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, Concatenate, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping

# Define GENRES constant (needed for feature selection)
GENRES = ['Action', 'Comedy', 'Drama', 'Horror', 'SciFi', 'Romance', 'Documentary', 'Animation', 'Thriller', 'Fantasy']

# ===================================
# DATA PREPARATION
# ===================================

# Load synthetic datasets - update with your actual file names
try:
    movies = pd.read_csv("trend_aware_movies_100_20250623_0459.csv")  # Update filename
    users = pd.read_csv("trend_aware_users_50000_20250623_0459.csv")  # Update filename
except FileNotFoundError:
    print("CSV files not found. Please ensure you have run the data generation script first.")
    print("Expected files:")
    print("- trend_aware_movies_[NUM]_[TIMESTAMP].csv")
    print("- trend_aware_users_[NUM]_[TIMESTAMP].csv")
    exit()

print(f"Loaded {len(movies)} movies and {len(users)} users")

# Generate synthetic interactions
def generate_interactions(users, movies, num_interactions=50000):  # Reduced for faster processing
    interactions = []

    # Sample users and movies for interactions
    for _ in range(num_interactions):
        user = users.sample(1).iloc[0]
        movie = movies.sample(1).iloc[0]

        # Calculate affinity score based on available features
        # Genre affinity - use the actual genre_affinity field from users
        primary_genre_match = 1.0 if user['genre_affinity'] == movie['primary_genre'] else 0.3
        secondary_genre_match = 1.0 if user['genre_affinity'] == movie['secondary_genre'] else 0.3
        genre_affinity = primary_genre_match * 0.7 + secondary_genre_match * 0.3

        # Mood-sentiment alignment
        mood_sentiment_map = {
            'Happy': 0.8, 'Sad': -0.8, 'Stressed': -0.5,
            'Relaxed': 0.5, 'Excited': 0.9, 'Bored': -0.6
        }
        user_mood_score = mood_sentiment_map.get(user['current_mood'], 0.0)
        sentiment_alignment = 1 - abs(user_mood_score - movie['title_sentiment'])

        # Normalize sentiment alignment to 0-1 range
        sentiment_alignment = max(0, min(1, sentiment_alignment))

        # Match scores based on available features
        engagement_match = user['engagement_score'] * movie['engagement_score']
        trend_match = user['trend_responsiveness'] * movie['trending_score']
        event_match = user['current_event_engagement'] * movie['current_event_relevance']
        rewatch_match = user['rewatch_ratio'] * movie['rewatchability']

        # Calculate final affinity
        affinity = (
            0.3 * genre_affinity +
            0.2 * sentiment_alignment +
            0.1 * engagement_match +
            0.15 * trend_match +
            0.1 * event_match +
            0.15 * rewatch_match
        )

        # Generate rating with some noise
        base_rating = 1 + 9 * affinity
        rating = base_rating + np.random.normal(0, 0.8)
        rating = max(1, min(10, rating))

        interactions.append({
            'user_id': user['user_id'],
            'movie_id': movie['movie_id'],
            'rating': rating
        })

    return pd.DataFrame(interactions)

print("Generating interaction data...")
interactions = generate_interactions(users, movies)
print(f"Generated {len(interactions)} interactions")

# Merge all data
print("Merging data...")
data = interactions.merge(users, on='user_id').merge(movies, on='movie_id', suffixes=('_user', '_movie'))

# ===================================
# FEATURE ENGINEERING
# ===================================

# Select relevant features based on actual column names
# User features - using only columns that exist in the users DataFrame
user_features = [
    'age', 'completion_rate', 'binge_score', 'rewatch_ratio',
    'rating_frequency', 'autoplay_acceptance', 'search_usage', 'content_diversity',
    'subtitle_usage', 'peak_viewing_time', 'weekend_ratio', 'session_length_avg',
    'time_since_last_watch', 'daily_consistency', 'trend_affinity', 'friend_influence',
    'social_engagement', 'group_watch_freq', 'weather_impact', 'seasonal_content_pref',
    'location_content_match', 'holiday_boost', 'engagement_score', 'mood_genre_alignment',
    'personalization_score', 'contextual_fit', 'new_release_responsiveness',
    'documentary_affinity', 'device_engagement', 'cultural_affinity',
    'event_interest', 'social_media_activity', 'trend_responsiveness',
    'current_event_engagement'
]

# Movie features - using only columns that exist in the movies DataFrame
movie_features = [
    'runtime', 'title_sentiment', 'violence_level', 'romance_level',
    'humor_level', 'complexity_score', 'days_since_release', 'decay_factor',
    'is_new_release', 'holiday_boost', 'avg_rating', 'rating_count',
    'box_office', 'rewatch_score', 'critical_acclaim', 'award_nominations',
    'mood_intensity', 'family_friendly', 'cultural_specificity',
    'current_event_relevance', 'trending_score', 'social_media_mentions',
    'search_volume', 'viral_potential', 'engagement_score', 'rewatchability'
]

# Add holiday features that exist in the data
holiday_features = [col for col in movies.columns if col.startswith('holiday_')]
movie_features.extend(holiday_features)

# Categorical features
categorical_features = ['gender']

# Filter features to only include those that exist in the data
user_features = [f for f in user_features if f in data.columns]
movie_features = [f for f in movie_features if f in data.columns]

all_features = user_features + movie_features + categorical_features
target = 'rating'

print(f"Using {len(user_features)} user features and {len(movie_features)} movie features")

# Verify all features exist
missing_features = [f for f in all_features if f not in data.columns]
if missing_features:
    print(f"Warning: Missing features: {missing_features}")
    all_features = [f for f in all_features if f in data.columns]

# Split data
X = data[all_features]
y = data[target]
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ===================================
# PREPROCESSING
# ===================================

# Identify feature types
numerical_features = [f for f in all_features if f not in categorical_features]

# Create preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

print("Preprocessing data...")
X_train_preprocessed = preprocessor.fit_transform(X_train)
X_test_preprocessed = preprocessor.transform(X_test)

print(f"Preprocessed feature dimensions: {X_train_preprocessed.shape[1]}")

# ===================================
# MODEL BUILDING
# ===================================

def create_recommender_model():
    # Input layers
    num_features = X_train_preprocessed.shape[1]
    input_layer = Input(shape=(num_features,))

    # Feature extractor
    x = Dense(512, activation='relu')(input_layer)
    x = BatchNormalization()(x)
    x = Dropout(0.3)(x)

    x = Dense(256, activation='relu')(x)
    x = BatchNormalization()(x)
    x = Dropout(0.2)(x)

    x = Dense(128, activation='relu')(x)
    x = BatchNormalization()(x)

    # Output layer
    output = Dense(1, activation='linear')(x)

    model = Model(inputs=input_layer, outputs=output)
    model.compile(
        optimizer=Adam(learning_rate=0.001),
        loss='mse',
        metrics=['mae']
    )
    return model

print("Building recommendation model...")
model = create_recommender_model()
model.summary()

# ===================================
# MODEL TRAINING
# ===================================

early_stopping = EarlyStopping(
    monitor='val_loss',
    patience=5,
    restore_best_weights=True
)

print("Training model...")
history = model.fit(
    X_train_preprocessed, y_train,
    validation_split=0.1,
    epochs=50,
    batch_size=256,
    callbacks=[early_stopping],
    verbose=1
)

# ===================================
# MODEL EVALUATION
# ===================================

print("Evaluating model...")
train_preds = model.predict(X_train_preprocessed).flatten()
test_preds = model.predict(X_test_preprocessed).flatten()

train_rmse = np.sqrt(mean_squared_error(y_train, train_preds))
test_rmse = np.sqrt(mean_squared_error(y_test, test_preds))

print(f"Train RMSE: {train_rmse:.4f}")
print(f"Test RMSE: {test_rmse:.4f}")

# ===================================
# RECOMMENDATION GENERATION
# ===================================

def recommend_movies(user_id, top_n=20):
    # Get user data
    user_data = users[users['user_id'] == user_id]
    if user_data.empty:
        print(f"User {user_id} not found")
        return pd.DataFrame()

    user = user_data.iloc[0]

    # Create dataset: user paired with all movies
    user_repeated = pd.DataFrame([user] * len(movies))
    user_repeated = user_repeated.reset_index(drop=True)
    movies_reset = movies.reset_index(drop=True)

    # Combine user and movie features
    all_pairs = pd.concat([user_repeated, movies_reset], axis=1)

    # Select only the features used in training
    all_pairs_features = all_pairs[all_features]

    # Preprocess
    all_pairs_preprocessed = preprocessor.transform(all_pairs_features)

    # Predict ratings
    predictions = model.predict(all_pairs_preprocessed).flatten()

    # Get top recommendations
    recommendations = movies.copy()
    recommendations['predicted_rating'] = predictions
    recommendations = recommendations.sort_values('predicted_rating', ascending=False).head(top_n)

    return recommendations[['movie_id', 'title', 'primary_genre', 'release_year', 'predicted_rating']]

# Example usage
user_example = users.sample(1)['user_id'].values[0]
print(f"\nTop recommendations for user {user_example}:")
recommendations = recommend_movies(user_example)
print(recommendations)

# ===================================
# MODEL SAVING
# ===================================

model.save("movie_recommender_model.keras")
print("Model saved as movie_recommender_model.keras")

# Save preprocessor for future use
import joblib
joblib.dump(preprocessor, 'preprocessor.pkl')
print("Preprocessor saved as preprocessor.pkl")

# Save feature names for reference
feature_info = {
    'user_features': user_features,
    'movie_features': movie_features,
    'categorical_features': categorical_features,
    'all_features': all_features
}
joblib.dump(feature_info, 'feature_info.pkl')
print("Feature information saved as feature_info.pkl")



user_example = "user_33429816"
print(f"\nTop recommendations for user {user_example}:")
recommendations = recommend_movies(user_example)
print(recommendations)

"""## Model"""